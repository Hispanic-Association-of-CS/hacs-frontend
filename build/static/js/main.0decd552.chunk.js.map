{"version":3,"sources":["images/logo.svg","components/Layouts/Footer.js","components/Wip/LandingPage/Carousel.js","components/Wip/LandingPage/Agenda.js","components/Wip/LandingPage/TwitterFeed.js","components/Wip/LandingPage/Announcements.js","components/Pages/LandingPage.js","components/Wip/Events/EventsCalendar.js","components/Pages/EventsPage.js","components/Wip/Corporate/SponsorPackage.js","data/sponsorList.js","components/Wip/Corporate/SponsorIcon.js","components/Wip/Corporate/Sponsors.js","components/Pages/CorporatePage.js","components/Routes/Routes.js","components/Layouts/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Footer","react_default","a","createElement","reactstrap_es","React","PureComponent","Carousel","Component","Agenda","TwitterFeed","class","href","async","src","charset","Announcements","LandingPage","Carousel_Carousel","Agenda_Agenda","TwitterFeed_TwitterFeed","Announcements_Announcements","EventsCalendar","EventsPage","EventsCalendar_EventsCalendar","SponsorPackage","SponsorList","sponsors","name","icon","Sponsor1","Sponsor2","Sponsor3","SponsorIcon","this","props","style","width","alt","concat","Sponsors","map","sponsor","SponsorIcon_SponsorIcon","CorporatePage","SponsorPackage_SponsorPackage","Sponsors_Sponsors","Routes","Switch","Route","exact","path","component","MyNavbar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","closeNavbar","state","isOpen","setState","collapsed","backgroundColor","dark","expand","fixed","tag","RRNavLink","to","className","onClick","navbar","activeClassName","App","BrowserRouter","basename","Fragment","Header","Routes_Routes","Layouts_Footer","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mRCezBC,mLAVX,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,4BALWE,IAAMC,+BCINC,mLAEjB,OACEN,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,8BAJ8BE,IAAMG,WCAvBC,mLAEjB,OACER,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,4BAJ4BE,IAAMG,WCDrBE,mLAEjB,OACET,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,oCAEAF,EAAAC,EAAAC,cAAA,KAAGQ,MAAM,mBAAmBC,KAAK,qDAAjC,uBAHF,IAG+GX,EAAAC,EAAAC,cAAA,UAAQU,OAAK,EAACC,IAAI,0CAA0CC,QAAQ,kBANhJV,IAAMG,WCI1BQ,mLAEjB,OACEf,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,mCAJmCE,IAAMG,WCH5BS,mLAEjB,OACEhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,yBACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACe,EAAD,OAEFjB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACgB,EAAD,OAEFlB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACiB,EAAD,OAEFnB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACkB,EAAD,eAf+BhB,IAAMG,WCA1Bc,mLAEjB,OACErB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,iDAJoCE,IAAMG,WCH7Be,mLAEjB,OACEtB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,mDAGJF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACqB,EAAD,eAV8BnB,IAAMG,WCGzBiB,mLAEjB,OACExB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,yDAJoCE,IAAMG,4BCGrCkB,EAAc,CACzBC,SAAU,CACR,CACEC,KAAM,eACNC,KAAMC,KAER,CACEF,KAAM,eACNC,KAAME,KAER,CACEH,KAAM,eACNC,KAAMG,OCbSC,mLAEjB,OACEhC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAM8B,KAAKC,MAAMP,MACjB3B,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,OACEW,IAAKoB,KAAKC,MAAMN,KAChBO,MAAO,CAAEC,MAAO,SAChBC,IAAG,YAAAC,OAAcL,KAAKC,MAAMP,iBATCvB,IAAMG,WCJzCmB,EAAWD,EAAYC,SAQRa,mLAMjB,OACEvC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,sCAEFF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACGuB,EAASc,IAAI,SAAAC,GAGZ,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,CAAaf,KAAMc,EAAQd,KAAMC,KAAMa,EAAQb,mBAhB9BxB,IAAMG,WCRvBoC,mLAEjB,OACE3C,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,6CACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAC0C,EAAD,QAGJ5C,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAC2C,EAAD,gBAZ+BzC,IAAMG,WCC5BuC,mLAEjB,OACE9C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,KACE/C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnC,IACjChB,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM,eAAgBC,UAAWR,IAC9C3C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM,UAAWC,UAAW7B,YANblB,IAAMG,2BC2E3B6C,qBA3Eb,SAAAA,EAAYlB,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAArB,KAAAmB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAArB,KAAAqB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAzB,KAAMC,KACDyB,OAASN,EAAKM,OAAOC,KAAZN,OAAAO,EAAA,EAAAP,QAAAO,EAAA,EAAAP,CAAAD,KACdA,EAAKS,YAAcT,EAAKS,YAAYF,KAAjBN,OAAAO,EAAA,EAAAP,QAAAO,EAAA,EAAAP,CAAAD,KACnBA,EAAKU,MAAQ,CACXC,QAAQ,GALOX,wEAUjBpB,KAAKgC,SAAS,CACZD,QAAS/B,KAAK8B,MAAMC,gDAKO,IAAzB/B,KAAK8B,MAAMG,WACbjC,KAAK0B,0CAKP,OACE3D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEgC,MAAO,CAAEgC,gBAAiB,WAC1BC,MAAI,EACJC,OAAO,KACPC,MAAO,OAEPtE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAaoE,IAAKC,IAAWC,GAAI,KAC/BzE,EAAAC,EAAAC,cAAA,QAAMwE,UAAU,cAAhB,SAEF1E,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAewE,QAAS1C,KAAK0B,SAC7B3D,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAU6D,OAAQ/B,KAAK8B,MAAMC,OAAQY,QAAM,GACzC5E,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKuE,UAAU,UAAUE,QAAM,GAC7B5E,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASuE,UAAU,YACjB1E,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACE8C,OAAK,EACLwB,GAAI,IACJI,gBAAiB,SACjBN,IAAKC,IACLG,QAAS1C,KAAK6B,aALhB,SAUF9D,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEsE,GAAI,eACJI,gBAAiB,SACjBN,IAAKC,IACLG,QAAS1C,KAAK6B,aAJhB,qBASF9D,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEsE,GAAI,UACJI,gBAAiB,SACjBN,IAAKC,IACLG,QAAS1C,KAAK6B,aAJhB,sBA3DO1D,IAAMG,YCERuE,mLAEjB,OACE9E,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CAAeC,SAAU,IACvBhF,EAAAC,EAAAC,cAACF,EAAAC,EAAMgF,SAAP,KACEjF,EAAAC,EAAAC,cAACgF,EAAD,CAAUR,UAAU,QACpB1E,EAAAC,EAAAC,cAACiF,EAAD,MACAnF,EAAAC,EAAAC,cAACkF,EAAD,eAPuB7E,mBCKb8E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO3F,EAAAC,EAAAC,cAAC0F,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0decd552.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nimport { Container, Row } from \"reactstrap\";\r\n\r\nclass Footer extends React.PureComponent {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <p>Footer</p>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport {Container} from \"reactstrap\";\r\n\r\n/**\r\n * Simple component displaying our mission statement\r\n * and then multiple photos of our membership at events or something\r\n */\r\nexport default class Carousel extends React.Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1>Carousel</h1>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {Container} from \"reactstrap\";\r\n\r\n/**\r\n * This should contain an embed of the agenda view\r\n * for our google calendar.\r\n */\r\nexport default class Agenda extends React.Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1>Agenda</h1>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {Container} from \"reactstrap\";\r\n\r\n/**\r\n * Component to house an embedded twitter feed for HACS\r\n */\r\nexport default class TwitterFeed extends React.Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1>Twitter Feed Component</h1>\r\n\r\n        <a class=\"twitter-timeline\" href=\"https://twitter.com/texasHACS?ref_src=twsrc%5Etfw\">Tweets by texasHACS</a> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\r\n\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {Container} from \"reactstrap\";\r\n\r\n/**\r\n * Component for announcements, not limited to events, but including things like signups to stuff\r\n * dates of volunteer events, and news immediately relevant to our members.\r\n * TODO:\r\n * Announcements will be retrieved via an API Call to our backend,\r\n * So we'll need at least some mock data to be able to complete this\r\n */\r\nexport default class Announcements extends React.Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1>Announcements</h1>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {Container, Row} from \"reactstrap\";\r\nimport Carousel from \"../Wip/LandingPage/Carousel\";\r\nimport Agenda from \"../Wip/LandingPage/Agenda\";\r\nimport TwitterFeed from \"../Wip/LandingPage/TwitterFeed\";\r\nimport Announcements from \"../Wip/LandingPage/Announcements\";\r\n\r\nexport default class LandingPage extends React.Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Row>The Landing Page</Row>\r\n        <Row>\r\n          <Carousel />\r\n        </Row>\r\n        <Row>\r\n          <Agenda />\r\n        </Row>\r\n        <Row>\r\n          <TwitterFeed />\r\n        </Row>\r\n        <Row>\r\n          <Announcements />\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {Container} from \"reactstrap\";\r\n\r\n/**\r\n * This will just be a google calendar embed\r\n * Would be nice if it is responsive in respect to screen size\r\n */\r\nexport default class EventsCalendar extends React.Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1>Events Calendar from google</h1>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {Col, Container, Row} from \"reactstrap\";\r\nimport EventsCalendar from \"../Wip/Events/EventsCalendar\";\r\n\r\nexport default class EventsPage extends React.Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <h1>We got events going on here in this</h1>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <EventsCalendar />\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {Container} from \"reactstrap\";\r\n\r\n/**\r\n * This should just be a simple component that renders the corporate package,\r\n * most likely a premade graphic to be imported\r\n */\r\nexport default class SponsorPackage extends React.Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1>The SponsorPackage will go in here.</h1>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import Sponsor1 from \"../images/logo.svg\";\r\nimport Sponsor2 from \"../images/logo.svg\";\r\nimport Sponsor3 from \"../images/logo.svg\";\r\n\r\n/**\r\n * This is dummy data for now, but will need the name of all our sponsors (maybe)\r\n * and a svg icon image (definitely) for each\r\n * Follow convention of\r\n * @type {{sponsors: *[]}}\r\n */\r\nexport const SponsorList = {\r\n  sponsors: [\r\n    {\r\n      name: \"dummy name 1\",\r\n      icon: Sponsor1\r\n    },\r\n    {\r\n      name: \"dummy name 2\",\r\n      icon: Sponsor2\r\n    },\r\n    {\r\n      name: \"dummy name 3\",\r\n      icon: Sponsor3\r\n    }\r\n  ]\r\n};\r\n","import React from \"react\";\r\nimport {Container, Row} from \"reactstrap\";\r\n\r\n/**\r\n * Most of the logic for this component has already been created.\r\n * It takes in two props from the parent\r\n * name : a string giving the name of the sponsor\r\n * icon : an image src for the sponsors icon\r\n */\r\nexport default class SponsorIcon extends React.Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Row>{this.props.name}</Row>\r\n        <Row>\r\n          <img\r\n            src={this.props.icon}\r\n            style={{ width: \"300px\" }}\r\n            alt={`Icon for ${this.props.name}`}\r\n          />\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {Col, Container, Row} from \"reactstrap\";\r\nimport {SponsorList} from \"../../../data/sponsorList\";\r\nimport SponsorIcon from \"./SponsorIcon\";\r\n\r\nconst sponsors = SponsorList.sponsors;\r\n\r\n/**\r\n * The intent for this component is to hold the\r\n * list of SponsorIcon components that make up\r\n * all our sponsors. To complete this the sponsorList\r\n * under the data folder will need to be filled out properly.\r\n */\r\nexport default class Sponsors extends React.Component {\r\n  /**\r\n    Use javascript's map function to\r\n    list them out programmatically.\r\n     */\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <h1>Sponsors will be listed</h1>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            {sponsors.map(sponsor => {\r\n              //  This function maps over the array of data we imported and passes the name and icon image onto\r\n              //  a component called SponsorIcon. We need icon images for each of our sponsors\r\n              return <SponsorIcon name={sponsor.name} icon={sponsor.icon} />;\r\n            })}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {Col, Container, Row} from \"reactstrap\";\r\nimport SponsorPackage from \"../Wip/Corporate/SponsorPackage\";\r\nimport Sponsors from \"../Wip/Corporate/Sponsors\";\r\n\r\nexport default class CorporatePage extends React.Component {\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <h1>This will be the Corporate page</h1>\r\n        <Row>\r\n          <Col>\r\n            <SponsorPackage />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Sponsors />\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n","import {Route, Switch} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport LandingPage from \"../Pages/LandingPage\";\r\nimport EventsPage from \"../Pages/EventsPage\";\r\nimport CorporatePage from \"../Pages/CorporatePage\";\r\n\r\nexport default class Routes extends React.Component {\r\n  render() {\r\n    return (\r\n      <Switch>\r\n        <Route exact path=\"/\" component={LandingPage} />\r\n        <Route exact path={\"/sponsorship\"} component={CorporatePage} />\r\n        <Route exact path={\"/events\"} component={EventsPage} />\r\n      </Switch>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink} from \"reactstrap\";\r\nimport {NavLink as RRNavLink} from \"react-router-dom\";\r\nimport \"./styles.css\";\r\n\r\nclass MyNavbar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.toggle = this.toggle.bind(this);\r\n    this.closeNavbar = this.closeNavbar.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  closeNavbar() {\r\n    if (this.state.collapsed !== true) {\r\n      this.toggle();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar\r\n          style={{ backgroundColor: \"#07969b\" }}\r\n          dark\r\n          expand=\"md\"\r\n          fixed={\"top\"}\r\n        >\r\n          <NavbarBrand tag={RRNavLink} to={\"/\"}>\r\n            <span className=\"text-white\">HACS</span>\r\n          </NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav className=\"ml-auto\" navbar>\r\n              <NavItem className=\"nav-item\">\r\n                <NavLink\r\n                  exact\r\n                  to={\"/\"}\r\n                  activeClassName={\"active\"}\r\n                  tag={RRNavLink}\r\n                  onClick={this.closeNavbar}\r\n                >\r\n                  Home\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  to={\"/sponsorship\"}\r\n                  activeClassName={\"active\"}\r\n                  tag={RRNavLink}\r\n                  onClick={this.closeNavbar}\r\n                >\r\n                  Sponsorship Info\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  to={\"/events\"}\r\n                  activeClassName={\"active\"}\r\n                  tag={RRNavLink}\r\n                  onClick={this.closeNavbar}\r\n                >\r\n                  Events\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MyNavbar;\r\n","import React, {Component} from \"react\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Footer from \"./components/Layouts/Footer\";\r\nimport Routes from \"./components/Routes/Routes\";\r\nimport MyNavBar from \"./components/Layouts/Header\";\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter basename={\"\"}>\r\n        <React.Fragment>\r\n          <MyNavBar className=\"App\" />\r\n          <Routes />\r\n          <Footer />\r\n        </React.Fragment>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}